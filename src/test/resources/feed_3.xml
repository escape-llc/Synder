<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="http://blogs.msdn.com/utility/FeedStylesheets/rss.xsl" media="screen"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
xmlns:wfw="http://wellformedweb.org/CommentAPI/">
<channel>
<sy:updatePeriod>hourly</sy:updatePeriod>
<sy:updateFrequency>2</sy:updateFrequency>
<sy:updateBase>2000-01-01T12:00+00:00</sy:updateBase>
<foreign><nestedForeign>333</nestedForeign><otherNestedForeign attr="111"/></foreign>
<title>Fabulous Adventures In Coding</title>
<dc:title>Fabulous Adventures In Coding</dc:title>
<link>http://blogs.msdn.com/ericlippert/default.aspx</link>
<description>Eric Lippert's Blog</description>
<dc:language>en-US</dc:language>
<dc:creator>Eric Lippert</dc:creator>
<generator>CommunityServer 2.1 SP1 (Build: 61025.2)</generator>
<pubDate>Mon, 29 Mar 2010 13:16:00 GMT</pubDate>
<item>
<title>Putting a base in the middle</title>
<link>http://blogs.msdn.com/ericlippert/archive/2010/03/29/putting-a-base-in-the-middle.aspx</link>
<pubDate>Mon, 29 Mar 2010 13:16:00 GMT</pubDate>
<guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9965484</guid>
<dc:creator>Eric Lippert</dc:creator>
<slash:comments>83</slash:comments>
<comments>http://blogs.msdn.com/ericlippert/comments/9965484.aspx</comments>
<wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9965484</wfw:commentRss>
<description>&lt;DIV class=mine&gt;
&lt;P&gt;&lt;STRONG&gt;UPDATE: I have rewritten this article based on new information I’ve just learned. I should have looked at the design notes archive first!&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Here’s a crazy-seeming but honest-to-goodness real customer scenario that got reported to me recently. There are three DLLs involved, Alpha.DLL, Bravo.DLL and Charlie.DLL. The classes in each are:&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P&gt;public class Alpha // In Alpha.DLL&lt;BR&gt;{&lt;BR&gt;&amp;nbsp; public virtual void M()&lt;BR&gt;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Console.WriteLine("Alpha");&lt;BR&gt;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;public class Bravo: Alpha // In Bravo.DLL&lt;BR&gt;{&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;public class Charlie : Bravo // In Charlie.DLL&lt;BR&gt;{&lt;BR&gt;&amp;nbsp; public override void M()&lt;BR&gt;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Console.WriteLine("Charlie");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.M();&lt;BR&gt;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/SPAN&gt;
&lt;P&gt;Perfectly sensible. You call M on an instance of Charlie and it says “Charlie / Alpha”. &lt;/P&gt;
&lt;P&gt;Now the vendor who supplies Bravo.DLL ships a new version which has this code:&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P&gt;public class Bravo: Alpha&lt;BR&gt;{&lt;BR&gt;&amp;nbsp; public override void M()&lt;BR&gt;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Console.WriteLine("Bravo");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.M();&lt;BR&gt;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/SPAN&gt;
&lt;P&gt;The question is: &lt;EM&gt;what happens if you call Charlie.M &lt;STRONG&gt;without recompiling Charlie.DLL&lt;/STRONG&gt;, but you are loading the new version of Bravo.DLL?&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;The customer was quite surprised that the output is still “Charlie / Alpha”, not “Charlie / Bravo / Alpha”.&lt;/P&gt;
&lt;P&gt;This is a completely new twist on the &lt;A href="http://blogs.msdn.com/ericlippert/archive/tags/Brittle+Base+Classes/default.aspx" mce_href="http://blogs.msdn.com/ericlippert/archive/tags/Brittle+Base+Classes/default.aspx"&gt;brittle base class failure&lt;/A&gt;; at least, it’s new to me.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Customer: What’s going on here?&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;When the compiler generates code for the base call, it looks at all the metadata and sees that the nearest valid method that the base call can be referring to is Alpha.Foo. So we generate code that says “make a non-virtual call to Alpha.Foo”. That code is baked into Charlie.DLL and it has the same semantics no matter what Bravo.DLL says. It calls Alpha.Foo.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Customer: You know, if you generated code that said “make a non-virtual call to Bravo.Foo”, the CLR will fall back to calling Alpha.Foo if there is no implementation of Bravo.Foo.&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;No, I didn’t know that actually. I’m slightly surprised that this doesn’t produce a verification error, but, whatever. Seems like a plausible behaviour, albeit perhaps somewhat risky. A quick look at the documented semantics of the call instruction indicates that this is the by-design behaviour, so it would be legal to do so.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Customer: Why doesn’t the compiler generate the call as a call to Bravo.Foo? Then you get the right semantics in my scenario!&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Essentially what is happening here is the compiler is generating code on the basis of &lt;EM&gt;today's&lt;/EM&gt; static analysis, not on the basis of what the world &lt;EM&gt;might&lt;/EM&gt; look like at runtime in an unknown future. When we generate the code for the base call we assume that there are not going to be changes in the base class hierarchy after compilation. That seemed at the time to be a reasonable assumption, though I can see that in your scenario, arguably it is not. 
&lt;P&gt;As it turns out, there are two reasons to do it the current way. The first is philosophical and apparently unconvincing. The second is practical. 
&lt;P&gt;&lt;STRONG&gt;Customer: What’s the philosophical justification?&lt;/STRONG&gt; 
&lt;P&gt;There are two competing "mental models" of what "base.Foo" means. 
&lt;P&gt;The mental model that matches what the compiler currently implements is “a base call is a &lt;EM&gt;non-virtual&lt;/EM&gt; call to the &lt;EM&gt;nearest method&lt;/EM&gt; on any base class, &lt;EM&gt;based entirely on information known at compile time.”&lt;/EM&gt; 
&lt;P&gt;Note that this matches exactly what we mean by "non-virtual call". An early-bound call to a non-virtual method is always a call to a &lt;EM&gt;particular method identified at compile time.&lt;/EM&gt; By contrast, a virtual method call is based at least in part on runtime analysis of the type hierarchy. More specifically, a virtual method identifies a "slot" at compile time but not the "contents" of that slot. The "contents" – the actually method to call – is identified at runtime based on what the runtime type of the receiver stuffed into the virtual method slot. 
&lt;P&gt;Your mental model is “a base call is a &lt;EM&gt;virtual&lt;/EM&gt; call to the &lt;EM&gt;nearest method&lt;/EM&gt; on any base class, based on both information &lt;EM&gt;known at runtime&lt;/EM&gt; about the actual class hierarchy of the receiver, and information known &lt;EM&gt;at compile time&lt;/EM&gt; about the compile-time type of the receiver.” 
&lt;P&gt;In your model the call is not actually virtual, because it is not based upon the contents of a virtual slot of the receiver. But neither is it entirely based on the compile-time knowledge of the type of the receiver! It's based on a combination of the two. Basically, it’s &lt;EM&gt;what would have been the non-virtual call in the counterfactual world where the compiler had been given correct information about what the types actually would look like at runtime.&lt;/EM&gt; 
&lt;P&gt;A developer who has the former mental model (like, say, me) would be deeply surprised by your proposed behavior. If the developer has classes Giraffe, Mammal and Animal, Giraffe overrides virtual method Animal.Feed, and the developer says base.Feed in Giraffe, then the developer is thinking either like me: 
&lt;BLOCKQUOTE&gt;
&lt;P&gt;I specifically wish Animal.Feed to be called here; if at runtime it turns out that evil hackers have inserted a method Mammal.Feed that I did not know about at compile time, I still want Animal.Feed to be called. I have compiled against Animal.Feed, I have tested against that scenario, and that call is precisely what I expect to happen. &lt;STRONG&gt;A base call gives me 100% of the safe, predictable, understandable, non-dynamic, testable behavior of any other non-virtual call. I rely upon those invariants to keep my customer's data secure.&lt;/STRONG&gt;&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;Basically, this position is "I trust only what I can see when I wrote the code; any other code might not do what I want safely or correctly". 
&lt;P&gt;Or like you: 
&lt;BLOCKQUOTE&gt;
&lt;P&gt;I need the base class to do some work for me. I want something on some base class to be called. Animal.Feed or Mammal.Feed, I don't care, just pick the best one - whichever one happens to be "most derived" in some future version of the world - by doing that analysis at runtime. &lt;STRONG&gt;In exchange for the flexibility of being able to hot-swap in new behavior by changing the implementation of my base classes without recompiling my derived classes, I am willing to give up safety, predictability, and the knowledge that what runs on my customer's machines is what I tested.&lt;/STRONG&gt;&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;Basically, this position is "I trust that the current version of my class knows how to interpret my request and will do so safely and correctly, even if I've never once tested that." 
&lt;P&gt;Though I understand your point of view, I’m personally inclined to do things the safe, boring and sane way rather than the flexible, dangerous and interesting way. However, based on the several dozen comments on the first version of this article, and my brief poll of other members of the C# compiler team, I am in a small minority that believes that the first mental model is the more sensible one. 
&lt;P&gt;&lt;STRONG&gt;Customer: The philosophical reason is unconvincing; I see a base call as meaning “call the nearest thing in the virtual hierarchy”. What’s the practical concern?&lt;/STRONG&gt; 
&lt;P mce_keep="true"&gt;In the autumn of 2000, during the development of C# 1.0, the behaviour of the compiler was as you expect: we would generate a call to Bravo.M and allow the runtime to resolve that as either a call to Bravo.M if there is one or to Alpha.M if there is not. My predecessor Peter Hallam then discovered the following case. Suppose the new hot-swapped Bravo.DLL is now:&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P mce_keep="true"&gt;public class Bravo: Alpha&lt;BR&gt;{&lt;BR&gt;&amp;nbsp; new private void M()&lt;BR&gt;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Console.WriteLine("Bravo");&lt;BR&gt;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/SPAN&gt;
&lt;P mce_keep="true"&gt;Now what happens? Bravo has added a private method, and one of our design principles is that &lt;STRONG&gt;private methods are invisible implementation details&lt;/STRONG&gt;; they do not have &lt;EM&gt;any&lt;/EM&gt; effect on the surrounding code that cannot see them. If you hot-swap in this code and the call in Charlie is realized as a call to Bravo.M then &lt;STRONG&gt;this crashes the runtime&lt;/STRONG&gt;. The base call resolves as a call to a private method from outside the method, which is not legal. &lt;STRONG&gt;Non-virtual calls do matching by signature, not by virtual slot.&lt;/STRONG&gt;&lt;/P&gt;
&lt;P mce_keep="true"&gt;The CLR architects and the C# architects considered many possible solutions to this problem, including adding a new instruction that would match by slot, changing the semantics of the call instruction, changing the meaning of "private", implementing name mangling in the compiler, and so on. The decision they arrived at was that all of the above were insanely dangerous considering how late in the ship cycle it was, how unlikely the scenario is, and the fact that this would be enabling a scenario which is directly contrary to good sense;&lt;STRONG&gt; if you change a base class then you should recompile your derived classes.&lt;/STRONG&gt; We don't want to be in the business of making it easier to do something &lt;STRONG&gt;dangerous and wrong&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P mce_keep="true"&gt;So they punted on the issue. The C# 1.0 compiler apparently did it the way you like, and generated code that sometimes crashed the runtime if you introduced a new private method: the original compilation of Charlie calls Bravo.M, even if there is no such method. If later there turns out to be an inaccessible one, it crashes.&lt;STRONG&gt; If you recompile Charlie.DLL, then the compiler notices that there is an intervening private method which will crash the runtime, and generates a call to Alpha.M.&lt;/STRONG&gt;&lt;/P&gt;
&lt;P mce_keep="true"&gt;This is far from ideal. The compiler is designed so that for performance reasons it does not load the potentially hundreds of millions of bytes of metadata about private members from referenced assemblies; now we have to load at least some of that. Also, this makes it difficult to use tools such as ASMMETA which produce "fake" versions of assemblies which are then later replaced with real assemblies. And of course there is always still the crashing scenario to worry about.&lt;/P&gt;
&lt;P mce_keep="true"&gt;The situation continued thusly until 2003, at which point again the C# team brought this up with the CLR team to see if we could get a new instruction defined, a "basecall" instruction which would provide an exact virtual slot reference, rather than doing a by-signature match as the non-virtual call instruction does now. After much debate it was again determined that &lt;STRONG&gt;this obscure and dangerous scenario did not meet the bar for making an extremely expensive and potentially breaking change to the CLR. &lt;/STRONG&gt;&lt;/P&gt;
&lt;P mce_keep="true"&gt;Concerned over all the ways that this behaviour was currently causing breaks and poor performance, in 2003 the C# design team decided to go with the present approach of binding directly to the slot as known at compile time. The team all agreed that the desirable behaviour was to always dynamically bind to the closest base class -- a point which I personally disagree with, but I see their point. But given the costs of doing so safely, and the fact that hot-swapping in new code in the middle of a class hierarchy is not exactly a desirable scenario to support, it's better to sometimes force a recompilation (that you should have done anyways) than to sometimes crash and die horribly.&lt;/P&gt;
&lt;P mce_keep="true"&gt;&lt;STRONG&gt;Customer: Wow. So, this will never change, right?&lt;/STRONG&gt;&lt;/P&gt;
&lt;P mce_keep="true"&gt;Wow indeed. I learned an awful lot today. One of these days I need to sit down and just read all five hundred pages of the C# 1.0 and 2.0 design notes.&lt;/P&gt;
&lt;P mce_keep="true"&gt;I wouldn’t expect this to ever change. If you change a base class, recompile your derived classes. That’s the safe thing to do. Do not rely on the runtime fixing stuff up for you when you hot-swap in a new class in the middle of a class hierarchy.&lt;/P&gt;&lt;/DIV&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9965484" width="1" height="1"&gt;</description>
<category domain="http://blogs.msdn.com/ericlippert/archive/tags/C_2300_/default.aspx">C#</category>
<category domain="http://blogs.msdn.com/ericlippert/archive/tags/Brittle+Base+Classes/default.aspx">Brittle Base Classes</category>
<category domain="http://blogs.msdn.com/ericlippert/archive/tags/Language+Design/default.aspx">Language Design</category>
</item>
<item><title>Knights, Knaves, Protected and Internal</title>
<link>http://blogs.msdn.com/ericlippert/archive/2010/03/25/knights-knaves-protected-and-internal.aspx</link>
<pubDate>Thu, 25 Mar 2010 13:50:00 GMT</pubDate>
<guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9976511</guid>
<dc:creator>Eric Lippert</dc:creator><slash:comments>42</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9976511.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9976511</wfw:commentRss><description>&lt;DIV class=mine&gt;
&lt;P&gt;&lt;A href="http://blogs.msdn.com/blogfiles/ericlippert/WindowsLiveWriter/KnightsKnavesProtectedandInternal_EB1D/Knight_2.png" mce_href="http://blogs.msdn.com/blogfiles/ericlippert/WindowsLiveWriter/KnightsKnavesProtectedandInternal_EB1D/Knight_2.png"&gt;&lt;IMG style="BORDER-RIGHT-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; MARGIN-LEFT: 0px; BORDER-LEFT-WIDTH: 0px; MARGIN-RIGHT: 0px" title=Knight border=0 alt=Knight align=left src="http://blogs.msdn.com/blogfiles/ericlippert/WindowsLiveWriter/KnightsKnavesProtectedandInternal_EB1D/Knight_thumb.png" width=147 height=240 mce_src="http://blogs.msdn.com/blogfiles/ericlippert/WindowsLiveWriter/KnightsKnavesProtectedandInternal_EB1D/Knight_thumb.png"&gt;&lt;/A&gt; When you override a virtual method in C# you are required to ensure that the stated accessibility of the overridden method - that is, whether it is public, internal, protected or protected internal(*) – is exactly re-stated in the overriding method. Except in one case. I refer you to section 10.6.4 of the specification, which states: &lt;/P&gt;
&lt;BLOCKQUOTE&gt;
&lt;DIV class=spec&gt;
&lt;P&gt;an override declaration cannot change the accessibility of the virtual method. However, if the overridden base method is &lt;EM&gt;protected internal&lt;/EM&gt; and it is declared in a different assembly than the assembly containing the override method then the override method’s declared accessibility must be &lt;EM&gt;protected&lt;/EM&gt;.&lt;/P&gt;&lt;/DIV&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;What the heck is up with that? Surely if an overridden method is &lt;EM&gt;protected internal&lt;/EM&gt; then it only makes sense that the overriding method should be exactly the same: &lt;EM&gt;protected internal&lt;/EM&gt;.&lt;/P&gt;
&lt;P&gt;I’ll explain why we have this rule, but first, a brief digression.&lt;/P&gt;
&lt;P&gt;A certain island is inhabited by only knights and knaves. Knights make only true statements and only answer questions truthfully; knaves make only false statements and only answer questions untruthfully. If you walk up to an inhabitant of the (aptly-named) Island of Knights and Knaves you can rapidly ascertain whether a particular individual is a knight or a knave by asking a question you know the answer to. For example “does two plus two equal four?” A knight will answer “yes” (**), and a knave will answer “no”. Knaves are prone to saying things like “my mother is a male knight”, which is plainly false. &lt;/P&gt;
&lt;P&gt;It might seem at first glance that there is no statement which could be made by both a knight and a knave. Since knights tell the truth and knaves lie, they cannot both make the same statement, right? But in fact there are many statements that can be made by both. Can you think of one?&lt;/P&gt;
&lt;P&gt;.&lt;/P&gt;
&lt;P&gt;.&lt;/P&gt;
&lt;P&gt;.&lt;/P&gt;
&lt;P&gt;.&lt;/P&gt;
&lt;P&gt;.&lt;/P&gt;
&lt;P&gt;.&lt;/P&gt;
&lt;P&gt;.&lt;/P&gt;
&lt;P&gt;Both a knight and a knave can say “I am a knight.” &lt;/P&gt;
&lt;P&gt;How does that work? The reason this works is because the pronoun “I” refers to different people when uttered by different people. If Alice, a knight, makes the statement “I am a knight”, she is asserting the truth that “Alice is a knight”. If Bob, a knave, makes the statement “I am a knight”, he is not asserting the true statement “Alice is a knight” but rather the false statement “Bob is a knight”. Similarly, both Alice and Bob can assert the statement "My name is Alice," for the same reason.&lt;/P&gt;
&lt;P&gt;And that’s why overriding methods in a different assembly aren’t “protected internal”. The modifier “internal” is like a pronoun; it refers to the current assembly. When used in two different assemblies it means different things. The purpose of the rule is to ensure that a derived class does not make the accessibility domain of the virtual member any larger or smaller.&lt;/P&gt;
&lt;P&gt;An analogy might help. Suppose a protected resource is a car, an assembly is a dwelling, a person is a class and descendent is a derived class.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Alice has a Mazda and lives in House with her good friend Charlie. 
&lt;LI&gt;Charlie has a child, Diana, who lives in Apartment. 
&lt;LI&gt;Alice has a child, Elroy, who lives in Condo with his good friend Greg. 
&lt;LI&gt;Elroy has a child – Alice’s grandchild -- Frank, who lives in Yurt. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Alice grants access to Mazda to anyone living in House and any descendent of Alice. The people who can access Mazda are Alice, Charlie, Elroy, and Frank. 
&lt;P&gt;Diana does not get access to Mazda because she is not Alice, not a descendent of Alice, and not a resident of House. That she is a child of Alice’s housemate is irrelevant. 
&lt;P&gt;Greg does not get access to Mazda for the same reason: he is not Alice, not a descendent of Alice, and not a resident of House. That he is a housemate of a descendent of Alice is irrelevant.&amp;nbsp; 
&lt;P&gt;Now we come to the crux of the matter. &lt;STRONG&gt;Elroy is not allowed to extend his access to Mazda to Greg.&lt;/STRONG&gt; Alice owns that Mazda and she said "myself, my descendents and my housemates". Her children don't have the right to extend the accessibility of Mazda beyond what she initially set up. Nor may Elroy deny access to Frank; as a descendent of Alice, Frank has a right to borrow the car and Greg cannot stop him by making it "private". 
&lt;P&gt;When Elroy describes what access he has to Mazda he is only allowed to say "I grant access to this to myself and my descendents" because that is what Alice already allowed. He cannot say "I grant access to Mazda to myself, my descendents and to the other residents of Condo". 
&lt;P&gt;----------------- &lt;/P&gt;
&lt;P&gt;(*) Private virtual methods are illegal in C#, which irks me to no end. I would totally use that feature if we had it.&lt;/P&gt;
&lt;P&gt;(**) Assuming that they answer at all, of course; there could be mute knights and knaves.&lt;/P&gt;&lt;/DIV&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9976511" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/C_2300_/default.aspx">C#</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/protected/default.aspx">protected</category></item><item><title>Socks, birthdays and hash collisions</title><link>http://blogs.msdn.com/ericlippert/archive/2010/03/22/socks-birthdays-and-hash-collisions.aspx</link><pubDate>Mon, 22 Mar 2010 13:18:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9963802</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>32</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9963802.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9963802</wfw:commentRss><description>&lt;DIV class=mine&gt;
&lt;P&gt;&lt;A href="http://nathknits.wordpress.com/2009/06/16/knitting-catch-up/"&gt;&lt;IMG style="BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; MARGIN: 0px 15px 0px 0px; DISPLAY: inline; BORDER-TOP: 0px; BORDER-RIGHT: 0px" title="Nath knits awesome socks" border=0 alt="Nath knits awesome socks" align=left src="http://blogs.msdn.com/blogfiles/ericlippert/WindowsLiveWriter/Socksbirthdaysandhashcollisions_9FBE/Socks_3.jpg" width=244 height=184&gt;&lt;/A&gt; Suppose you’ve got a huge mixed-up pile of white, black, green and red socks, with roughly equal numbers of each. You randomly choose two of them. What is the probability that they are a matched pair?&lt;/P&gt;
&lt;P&gt;There are sixteen ways of choosing a pair of socks: WW, WB, WG, WR, BW, BB, … Of those sixteen pairs, four of them are matched pairs. So chances are 25% that you get a matched pair. &lt;/P&gt;
&lt;P&gt;Suppose you choose three of them. What is the probability that amongst the socks you chose, there exists at least one matched pair?&lt;/P&gt;
&lt;P&gt;Well, we already know that chances are 25% after you pick out just the first two. If you get a matched pair right off, great. If you don’t, then there are two colours in hand you might match. So the odds are going to be a lot better.&lt;/P&gt;
&lt;P&gt;There are 64 ways of choosing three socks: WWW, WWB, … and so on. Of those 64 possible combinations, 40 of them have at least one matched pair, so that’s about a 63% chance. &lt;/P&gt;
&lt;P&gt;Suppose you choose four. There are 256 possible combinations, 232 of which have at least one matched pairs, so that’s a 91% chance.&lt;/P&gt;
&lt;P&gt;Of course by the time we get to five socks, we have a 100% chance of getting a pair; five socks, four colours, there have got to be two alike.&lt;/P&gt;
&lt;P&gt;It might appear that we’ve slightly messed up the probabilities here because once you choose one white sock, odds are slightly better that the next sock you pick will not be white, since there are now fewer white socks in the pile. But if the pile is big enough then we can neglect this minor problem. &lt;/P&gt;
&lt;P&gt;From now on we’ll call getting a matched pair a “collision”.&lt;/P&gt;
&lt;P&gt;It seems clear that as we increase &lt;EM&gt;the number of possible sock colours&lt;/EM&gt;, we decrease &lt;EM&gt;the probability of getting a collision in some sample size&lt;/EM&gt;. And as we increase &lt;EM&gt;the size of the sample&lt;/EM&gt;, we increase &lt;EM&gt;the probability of the sample containing a collision&lt;/EM&gt;.&lt;/P&gt;
&lt;P&gt;Suppose you have 365 different colours of socks - perhaps each sock has a number on it giving its colour number, so that we can tell them apart - and a pile of about six billion socks, with roughly equal numbers of each sock colour. What is the probability that we’ll get a collision if we pull out two socks at random? One in 365, clearly. Three socks? A little bit better than double that.&amp;nbsp; And so on. To work out the exact probabilities we’d work out the number of possible combinations, and the number of those combinations that contain at least one collision.&lt;/P&gt;
&lt;P&gt;Turns out that the point where you have a better than 50% chance of having a collision is 23 socks. This is the famous “birthday paradox”; if instead of 365 colours of socks we have 365 possible birthdays (ignoring leap years, the fact that more people are born on certain days than others, and so on) and we have a large group of people to choose from at random, then once you get to 23 people the odds are about fifty-fifty that two of them have the same birthday. By 50 people, chances are about 97% that two have the same birthday.&lt;/P&gt;
&lt;P&gt;Which is maybe a nice party trick next time you’re at a party with 30 to 50 people – if you go around the room and ask everyone to say their birthday, odds are very good that two people will say the same day. But what’s my point?&lt;/P&gt;
&lt;P&gt;Suppose you have just over four billion possible sock colours and a truly enormous supply of socks of each colour, such that each one is about equally likely. You start pulling socks out of the pile. What is the probability that you get a collision based on the number of socks you pull out? Four billion is an awfully big number compared to 4 or 365. What’s your intuition about the likelihood of a collision? How long until you have to start worrying about it?&lt;/P&gt;
&lt;P&gt;Not nearly as long as you might think. I’ve worked out the math and summarized it in this handy log-log chart:&lt;/P&gt;
&lt;P&gt;&lt;A href="http://blogs.msdn.com/blogfiles/ericlippert/WindowsLiveWriter/Socksbirthdaysandhashcollisions_9FBE/Collision_4.png" mce_href="http://blogs.msdn.com/blogfiles/ericlippert/WindowsLiveWriter/Socksbirthdaysandhashcollisions_9FBE/Collision_4.png"&gt;&lt;IMG style="BORDER-RIGHT-WIDTH: 0px; DISPLAY: block; FLOAT: none; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; MARGIN-LEFT: auto; BORDER-LEFT-WIDTH: 0px; MARGIN-RIGHT: auto" title=Collision border=0 alt=Collision src="http://blogs.msdn.com/blogfiles/ericlippert/WindowsLiveWriter/Socksbirthdaysandhashcollisions_9FBE/Collision_thumb_1.png" width=584 height=409 mce_src="http://blogs.msdn.com/blogfiles/ericlippert/WindowsLiveWriter/Socksbirthdaysandhashcollisions_9FBE/Collision_thumb_1.png"&gt;&lt;/A&gt; &lt;/P&gt;
&lt;P&gt;Man, is there anything better than getting a straight line on a log-log chart?&lt;/P&gt;
&lt;P&gt;Anyway, you end up with a 1% chance of a collision after about 9300 tries, and a 50% chance after only 77000 tries. By the time you get into the mid six-digit numbers chances are for practical purposes 100% that there is a collision in there somewhere. &lt;/P&gt;
&lt;P&gt;This is why &lt;STRONG&gt;it is a really bad idea to use 32 bit hash codes as “unique” identifiers.&lt;/STRONG&gt; Hash values aren't &lt;EM&gt;random&lt;/EM&gt; per se, but if they're well-distributed then they might as well be for our purposes. You might think “well, sure, obviously they are not truly unique since there are more than four billion possible values, but only four billion hash codes available. But there are so many possible hash values, odds are really good that I’m going to get unique values for my hashes”. But are the chances really that good? 9300 objects is not that many and 1% is a pretty high probability of collision.&lt;/P&gt;&lt;/DIV&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9963802" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/Mathematics/default.aspx">Mathematics</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/Birthdays/default.aspx">Birthdays</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/Hashing/default.aspx">Hashing</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/Socks/default.aspx">Socks</category></item><item><title>Do not name a class the same as its namespace, Part Four</title><link>http://blogs.msdn.com/ericlippert/archive/2010/03/18/do-not-name-a-class-the-same-as-its-namespace-part-four.aspx</link><pubDate>Thu, 18 Mar 2010 13:56:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9962139</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>27</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9962139.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9962139</wfw:commentRss><description>&lt;DIV class=mine&gt;
&lt;P&gt;&lt;STRONG&gt;Part Four: Making the problem worse&lt;/STRONG&gt; 
&lt;P mce_keep="true"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;I said earlier that the fundamental reason for namespaces in the first place was organization of types into a hierarchy, not separation of two things with similar names. But suppose you &lt;EM&gt;are&lt;/EM&gt; putting something into a namespace because you have two things that are of the same name and need to be kept separate. Suppose you reason “I’m going to put List into its own namespace because List could conflict with another class named List. The user needs to be able to qualify that.”&lt;/P&gt;
&lt;P&gt;OK, that’s fine; put List into MyContainers then. But &lt;EM&gt;why&lt;/EM&gt; would you then repeat the process and put List into a child namespace in MyContainers? &lt;STRONG&gt;The most plausible reason is that the level of disambiguation achieved so far is insufficient; some other entity named List is going to be in scope in a code region where elements of MyContainers are also in scope. &lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Let us posit that as our cause for creating a new namespace MyContainers, and then creating a new sub-namespace, MyContainers.X, to be the declaration space of List. What name should we choose for X? If the whole point is that something else named List is in scope somewhere that elements of MyContainers are in scope, then choosing “List” for “X” is making the problem worse, not better! Before you had two things named List in scope. Now you have &lt;EM&gt;three&lt;/EM&gt; things named List, two of which are in scope. This is making it more confusing without solving the problem at hand: that there are two things named List in scope.&lt;/P&gt;
&lt;P&gt;Any one of these four reasons is enough to avoid this bad practice; avoid, avoid, avoid.&lt;/P&gt;
&lt;P mce_keep="true"&gt;&amp;nbsp;&lt;/P&gt;&lt;/DIV&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9962139" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/C_2300_/default.aspx">C#</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/scope/default.aspx">scope</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/namespaces/default.aspx">namespaces</category></item><item><title>Do not name a class the same as its namespace, Part Three</title><link>http://blogs.msdn.com/ericlippert/archive/2010/03/15/do-not-name-a-class-the-same-as-its-namespace-part-three.aspx</link><pubDate>Mon, 15 Mar 2010 13:53:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9962138</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>18</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9962138.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9962138</wfw:commentRss><description>&lt;DIV class=mine&gt;
&lt;P&gt;&lt;STRONG&gt;Part Three: Bad hierarchical design&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;The reason we humans invented hierarchies in the first place is to organize a complicated body of stuff such that there’s a well-defined place for everything. Any time you see a hierarchy where there are two levels with the same name, something is messed up in the design of that hierarchy. And any time you see a hierarchy where one of the interior nodes has a single child, again, something is probably messed up.&lt;/P&gt;
&lt;P&gt;Krzysztof points out in the annotated Framework Design Guidelines that the fundamental point of namespaces is not actually to allow you to disambiguate two things with the same name. (Ideally there would never be a situation where two things had the same name in the first place; coming up with a mechanism to enable that problem and then deal with it seems counterproductive.) Rather, &lt;STRONG&gt;the point of namespaces is to organize types into a hierarchy that is easy to understand&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;That is, the point of namespaces is not just to keep similarly-named things separated, but rather, to group things that have something in common together so that you can find them. If you don’t think that there are two or more things that could go into a namespace, then it is probably not a good namespace. &lt;/P&gt;
&lt;P&gt;My original example was a namespace MyContainers.List containing a class List. Could any other class go into MyContainers.List? No. The right design is to either move the class List into the MyContainers namespace, or to make the namespace MyContainers.Lists, plural, and have it contain more than one thing, say, MutableList and ImmutableList. &lt;/P&gt;
&lt;P&gt;The commonality that groups a set of types into a namespace could be anything. System.Collections.Generic groups collection types by an implementation detail: they’re all generic. System.IO groups types by related functionality. Top-level namespaces like “System” and “Microsoft” group things by whether they are part of the core functionality of the platform, or are Microsoft-specific extensions to it. But the point is that each of these namespaces groups a large number of things by some shared characteristic. A namespace containing a type of the same name indicates a failure in the design of the hierarchy.&lt;/P&gt;
&lt;P&gt;Next time: It makes a bad situation worse.&lt;/P&gt;&lt;/DIV&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9962138" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/C_2300_/default.aspx">C#</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/namespaces/default.aspx">namespaces</category></item><item><title>Do not name a class the same as its namespace, Part Two</title><link>http://blogs.msdn.com/ericlippert/archive/2010/03/11/do-not-name-a-class-the-same-as-its-namespace-part-two.aspx</link><pubDate>Thu, 11 Mar 2010 18:51:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9962136</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>11</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9962136.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9962136</wfw:commentRss><description>&lt;DIV class=mine&gt;
&lt;P&gt;&lt;STRONG&gt;Part Two: Machine-generated code: &lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;You write&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P&gt;namespace Foo&lt;BR&gt;{&lt;BR&gt;&amp;nbsp; public sealed class Foo&lt;BR&gt;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public string Blah(int x) { … }&lt;BR&gt;&amp;nbsp; } &lt;BR&gt;}&lt;/P&gt;&lt;/SPAN&gt;
&lt;P&gt;You take this code and run a third-party “decorator” tool over it that makes your class into a more colourful class:&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P&gt;// Machine-generated code:&lt;BR&gt;namespace Foo&lt;BR&gt;{&lt;BR&gt;&amp;nbsp; public sealed class ColorFoo&lt;BR&gt;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public ColorFoo(Foo.Foo foo, System.Drawing.Color color)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; innerFoo = foo;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; innerColor = color;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private Foo.Foo innerFoo;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private System.Drawing.Color innerColor;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public System.Drawing.Color Color { get { return innerColor; } }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public string Blah(int x) { return innerFoo.Blah(x); }&lt;BR&gt;&amp;nbsp; }&lt;BR&gt;}&lt;BR&gt;&lt;/SPAN&gt;&lt;BR&gt;And maybe some other stuff in there like an implicit conversion to or from Foo, and so on. The exact details of the decorator aren’t important here; what’s important is that &lt;EM&gt;this code was generated by a machine&lt;/EM&gt;. &lt;/P&gt;
&lt;P&gt;The authors of the code generator thought they were being clever and fully qualifying all the type names, but they were not clever enough. Those type names should actually be fully qualified with “global::” on the front of all of them. The code as it stands will not compile; it gives the incredibly unhelpful message “type name Foo does not exist in Foo.Foo”.&amp;nbsp; &lt;/P&gt;
&lt;P&gt;Uh, what? It sure looks like a type named Foo exists in Foo… oh, wait. &lt;EM&gt;Inside&lt;/EM&gt; namespace Foo, the name “Foo.Foo” means “the thing named Foo inside type Foo”, and we’re inside namespace Foo. &lt;/P&gt;
&lt;P&gt;It’s ironic, like good advice that you just didn’t take: the code generator writers would have been better off &lt;EM&gt;not&lt;/EM&gt; qualifying the names in this case. &lt;/P&gt;
&lt;P&gt;Now the user is again in a cleft stick not of their own devising; the code is machine-generated and probably cannot easily be edited because its just going to be re-generated again later and the edits will be lost.&amp;nbsp; &lt;/P&gt;
&lt;P&gt;Now, you might say, well, this is a bug in the code generator. There exist such code generators; I actually wrote this bug into a code generator once, though fortunately I realized my mistake before we shipped. It’s really easy to do, and lots of existing code generators do not fully qualify their type names all the way out to “global::”. (*)&lt;/P&gt;
&lt;P&gt;But still, better to not cause trouble for code generators in the first place; you can avoid the problem by not naming the class and the namespace the same thing.&lt;/P&gt;
&lt;P&gt;This scenario happens surprisingly often. Our own testers have rediscovered this one independently several times when they’ve been doing testing on code generators, and often believe it to be a bug in the compiler’s type lookup algorithm, not a flaw in the code generator.&lt;/P&gt;
&lt;P&gt;Next time: how to design a bad hierarchy&lt;/P&gt;
&lt;P&gt;*************&lt;/P&gt;
&lt;P&gt;(**) And of course many code generators were written in the C# 1.0 days before the “global::” syntax was invented.&lt;/P&gt;&lt;/DIV&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9962136" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/C_2300_/default.aspx">C#</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/Code+Generation/default.aspx">Code Generation</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/namespaces/default.aspx">namespaces</category></item><item><title>Do not name a class the same as its namespace, Part One</title><link>http://blogs.msdn.com/ericlippert/archive/2010/03/09/do-not-name-a-class-the-same-as-its-namespace-part-one.aspx</link><pubDate>Tue, 09 Mar 2010 14:52:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9962129</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>23</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9962129.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9962129</wfw:commentRss><description>&lt;DIV class=mine&gt;
&lt;P&gt;The Framework Design Guidelines say in section 3.4 “do not use the same name for a namespace and a type in that namespace”. (*) That is:&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P&gt;namespace MyContainers.List&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public class List { … }&lt;BR&gt;}&lt;/P&gt;&lt;/SPAN&gt;
&lt;P&gt;Why is this badness? Oh, let me count the ways.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Part One: Collisions amongst referenced assemblies:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;You can get yourself into situations where you think you are referring to one thing but in fact are referring to something else. Suppose you end up in this unfortunate situation: you are writing Blah.DLL and importing Foo.DLL and Bar.DLL, which, unfortunately, both have a type called Foo:&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P&gt;// Foo.DLL:&lt;BR&gt;namespace Foo { public class Foo { } }&lt;/P&gt;
&lt;P&gt;// Bar.DLL:&lt;BR&gt;namespace Bar { public class Foo { } }&lt;/P&gt;
&lt;P&gt;// Blah.DLL:&lt;BR&gt;namespace Blah &lt;BR&gt;{&lt;BR&gt;&amp;nbsp; using Foo;&lt;BR&gt;&amp;nbsp; using Bar;&lt;BR&gt;&amp;nbsp; class C { Foo foo; }&lt;BR&gt;}&lt;/P&gt;&lt;/SPAN&gt;
&lt;P&gt;The compiler gives an error. “Foo” is ambiguous between Foo.Foo and Bar.Foo. Bummer. I guess I’ll fix that by fully qualifying the name:&lt;/P&gt;&lt;SPAN class=code&gt;&amp;nbsp; class C { Foo.Foo foo; }&lt;BR&gt;&lt;/SPAN&gt;
&lt;P&gt;This now gives the ambiguity error “Foo in Foo.Foo is ambiguous between Foo.Foo and Bar.Foo”. We still don’t know what the first Foo refers to, and until we can figure that out, we don’t even bother to try to figure out what the second one refers to.&lt;/P&gt;
&lt;P&gt;This reveals an interesting point about the design of the “type binding” algorithm in C#. That is, the algorithm which determines what type or namespace a name like “X.Y” is talking about. We do not “backtrack”. We do not say “well, suppose X means this. Then Y would have no meaning. Let’s backtrack; suppose X means this other thing, oh, yes, then Y has a meaning.” We figure out what X unambiguously means, and only then do we figure out what Y means. If X is ambiguous, we don’t check all the possibilities to see if any of them has a Y, we just give up.&lt;/P&gt;
&lt;P&gt;Assuming you cannot change Foo.DLL, the correct thing to do here is to either remove the “using Foo” – and who knows what all that will break – or to use an extern alias when compiling:&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P&gt;// Blah.DLL:&lt;BR&gt;extern alias FOODLL;&lt;BR&gt;namespace Blah &lt;BR&gt;{&lt;BR&gt;&amp;nbsp; using Foo;&lt;BR&gt;&amp;nbsp; using Bar;&lt;BR&gt;&amp;nbsp; class C { FOODLL::Foo.Foo foo; }&lt;BR&gt;}&lt;/P&gt;&lt;/SPAN&gt;
&lt;P&gt;Many developers are unfamiliar with the “extern alias” feature. And many of those developers who end up in this situation thereby end up in a cleft stick not of their own devising. Some of them send an angry and profane email to the person who did not cause the problem in the first place, namely, me.&lt;/P&gt;
&lt;P&gt;The problem can be avoided in the first place by the authors of Foo.DLL following the guidelines and not naming their type and their namespace the same thing.&lt;/P&gt;
&lt;P&gt;Next time: machine-generated code throws a wrench into its own works.&lt;/P&gt;
&lt;P&gt;****************&lt;/P&gt;
&lt;P&gt;(*) FXCOP flags violations of a far more stringent guideline – FXCOP will tell you if *any* type name conflicts with *any* namespace. But today I’m just talking about the straight-up type-in-a-namespace scenario.&lt;/P&gt;&lt;/DIV&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9962129" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/C_2300_/default.aspx">C#</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/namespaces/default.aspx">namespaces</category></item><item><title>Attracting Talent, summarized</title><link>http://blogs.msdn.com/ericlippert/archive/2010/03/08/attracting-talent-summarized.aspx</link><pubDate>Mon, 08 Mar 2010 14:30:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9972924</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>39</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9972924.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9972924</wfw:commentRss><description>&lt;div class="mine"&gt; &lt;p&gt;Thanks for all your insights on what is attractive or unattractive about job postings, and about working on developer tools. A great many of the comments were strongly aligned with each other; no one likes “alphabet soup”. And a number of them illustrated that there is a wide spectrum of what people find attractive and unattractive. To sum up the hundred comments I received: &lt;p&gt;Factors that make a job posting unattractive are:  &lt;ul&gt; &lt;li&gt;“Required Skills Include…”  &lt;ul&gt; &lt;li&gt;“technology vomit”, aka “alphabet soup”. ASP, PHP, ODBC, VSTO, ADO, VB, TLC, NGO, BMX, OMG, WTF, BBQ…  &lt;li&gt;overemphasis on specific existing knowledge vs. ability to learn new skills  &lt;li&gt;too many specifics: so many “required” skills that no mortal could actually fit the bill  &lt;li&gt;too few specifics: “Fortune 500 company seeks detail oriented, self motivated programmer to work on exciting new projects” says nothing  &lt;li&gt;nonsensical requirements: a posting requiring “five years experience with C# 4” makes no sense  &lt;li&gt;things that ought to be assumed (can type, knows how to use a word processor)  &lt;li&gt;too much emphasis on certifications / degrees / class standing  &lt;li&gt;requiring familiarity with older technologies (VB6, for example)&lt;/li&gt;&lt;/ul&gt; &lt;li&gt;Format and style  &lt;ul&gt; &lt;li&gt;too long; didn’t read  &lt;li&gt;too short; not enough information  &lt;li&gt;sounds like it was written by someone who has no idea what they’re actually talking about  &lt;li&gt;arrogant or aggressive style  &lt;li&gt;full of internal jargon, or exposing clunky mechanisms - "Position: SDEII(707719-External)" &lt;/li&gt;&lt;/ul&gt; &lt;li&gt;Personality and culture  &lt;ul&gt; &lt;li&gt;no evidence of awesome coding methodologies, such as “Agile Programming”  &lt;li&gt;evidence of dogmatic devotion to trendy coding methodologies, such as “Agile Programming”  &lt;li&gt;flat, boring list of requirements with no evidence of “personality”  &lt;li&gt;silly attempts to inject “personality”. (Be a ninja rockstar coder!)  &lt;li&gt;no indication of working environment – is it a noisy cube farm, private offices, on-site at the client’s space, what?&lt;/li&gt;&lt;/ul&gt; &lt;li&gt;The job itself  &lt;ul&gt; &lt;li&gt;vague, unfocussed, directionless, no clear indication of responsibilities, posting seems to be about hiring a warm body  &lt;li&gt;job description does not distinguish it from a thousand other postings (“Web developer wanted for… web development”)  &lt;li&gt;no telecommuting  &lt;li&gt;relocation required  &lt;li&gt;no indication of salary range  &lt;li&gt;salary is indicated but too low  &lt;li&gt;job requires crazy hours away from family and other pursuits  &lt;li&gt;no indication of what tools/languages will be used&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Factors that make a job posting attractive are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Required skills  &lt;ul&gt; &lt;li&gt;relevant, focused, sensible  &lt;li&gt;emphasis on ability to learn &lt;/li&gt;&lt;/ul&gt; &lt;li&gt;Format and style  &lt;ul&gt; &lt;li&gt;well-written, self-aware, humble, enthusiastic&lt;/li&gt;&lt;/ul&gt; &lt;li&gt;Personality and culture  &lt;ul&gt; &lt;li&gt;good work-life balance  &lt;li&gt;corporate culture and values clearly expressed  &lt;li&gt;evidence of programming methodologies, such as “Agile Programming”  &lt;li&gt;opportunity to work with famous industry leaders or on famous products&lt;/li&gt;&lt;/ul&gt; &lt;li&gt;The job itself  &lt;ul&gt; &lt;li&gt;described in detail: specific team, specific product, specific job  &lt;li&gt;telecommuting possible  &lt;li&gt;work is beneficial to industry and society  &lt;li&gt;work has large scope -- “change the world”  &lt;li&gt;work is challenging  &lt;li&gt;product is innovative  &lt;li&gt;tools/languages to be used are described and are current and familiar  &lt;li&gt;good pay  &lt;li&gt;autonomy to choose own tools, architectures, methodologies  &lt;li&gt;details of the team stated – team size, for example  &lt;li&gt;more than just typing in code – opportunities for UI design, DB design, troubleshooting user problems, and so on&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Factors that make working on developer tools unattractive are:  &lt;ul&gt; &lt;li&gt;not used by ordinary people; less impact than working on a browser or a word processor, which ship to hundreds of millions of people  &lt;li&gt;problems are too academic, too abstract, too difficult  &lt;li&gt;the job requires a CS background; the interview process is going to be scary, difficult, and I don’t want to set myself up for failure.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;The last point I want to talk about in a bit more depth.&lt;/p&gt; &lt;p&gt;You don’t need a PhD in computer science or be a Waterloo grad to work in DevDiv. Now, don’t get me wrong; it helps to have a relevant degree from a great school. A great many of my coworkers have degrees in CS, mathematics or other related fields. But a number of my coworkers do not have degrees and are not even from Waterloo. (At one brief moment in my career my entire management chain from me up to our vice president was Waterloo grads; there are disproportionately many Waterloo grads in DevDiv.)&amp;nbsp; Having an academic background certainly helps because it means that you’ve already been exposed to a lot of the ideas that we work with every day. But what matters is whether you can grasp those ideas and use them &lt;strong&gt;in practice&lt;/strong&gt;, not whether you can “chew algebra and spit assembler” as one commenter put it. &lt;/p&gt; &lt;p&gt;A few anecdotes to illustrate my point. A couple years ago I had a conversation with an architect who had spent several years building up a library of objects to represent control flow operations on generic types, and only a year after he was finished did he realize “&lt;em&gt;aha, this pattern of composable objects that I built this whole architecture around is called a monad&lt;/em&gt;.” You don’t need to be able to rattle off “a monad is an endofunctor with an associated bind and return functor” in order to &lt;em&gt;write a library of objects&lt;/em&gt; that an academic would identify as being monadic.&lt;/p&gt; &lt;p&gt;A more extreme example: my wife worked at Microsoft successfully for ten years as a software tester; her degree is in the study of the French “Theatre of the Absurd” movement of the mid 20th century. Admittedly, that sort of thing is less common these days than it was fifteen years ago. But it does illustrate that people do come here with all kinds of academic backgrounds. What matters much more than academic background is drive, talent, intelligence, ability to learn new skills, and simply getting stuff done. &lt;/p&gt; &lt;p&gt;Let’s move on to the positives.&lt;/p&gt; &lt;p&gt;Factors that make working on developer tools at Microsoft attractive are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;your customers are developers; you understand the customer and they understand you  &lt;li&gt;you are building tools that make your own job better  &lt;li&gt;problems in this space are more challenging, interesting, academic, abstract and difficult than those in many other problem spaces  &lt;li&gt;a whole team full of tool makers is likely to be a good team to work with  &lt;li&gt;the opportunity to ship cutting-edge technology to millions of customers  &lt;li&gt;“programming about programming is twice the fun!”  &lt;li&gt;employees are surrounded by industry leaders who do great things; employees have direct access to these leaders rather than relying on blog posts, magazine articles, interviews, and so on.  &lt;li&gt;programmers are well-shielded from having to deal with non-programming aspects of business  &lt;li&gt;corporate culture is well-known: hours are flexible, dress code is flexible, and so on  &lt;li&gt;Microsoft provides opportunities to take huge bets; our projects have enormous scope  &lt;li&gt;compensation and benefits – all kinds of insurance, gym memberships, bus passes – are generous  &lt;li&gt;developers can advance on the “technical track”; you don’t have to become a manager to get promoted around here&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Thanks again for all your comments and constructive criticisms. I appreciate it very much. &lt;/p&gt;&lt;/div&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9972924" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/Interviewing/default.aspx">Interviewing</category></item><item><title>Too much reuse</title><link>http://blogs.msdn.com/ericlippert/archive/2010/03/04/too-much-reuse.aspx</link><pubDate>Thu, 04 Mar 2010 14:33:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9965434</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>71</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9965434.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9965434</wfw:commentRss><description>&lt;DIV class=mine&gt;
&lt;P&gt;A recent user question: 
&lt;BLOCKQUOTE&gt;
&lt;P&gt;&lt;FONT color=#008000&gt;I have code that maintains a queue of pending work items waiting to be completed on various different worker threads. In certain unfortunate fatal error situations I complete each of these by throwing an exception. Can I create just one exception object? Are there any issues throwing the same exception object multiple times on multiple threads? &lt;/FONT&gt;&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;Anyone who has ever seen this in a code review knows the answer: &lt;SPAN class=code&gt;
&lt;P&gt;catch(Exception ex)&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp; Logger.Log(ex);&lt;BR&gt;&amp;nbsp;&amp;nbsp; throw ex;&lt;BR&gt;} &lt;/SPAN&gt;
&lt;P&gt;This is a classic “gotcha”; almost always the right thing to do is to say “throw;” rather than “throw ex;” – the reason being that &lt;STRONG&gt;exceptions are not completely immutable in .NET.&lt;/STRONG&gt; The exception object’s stack trace is set at the point where the exception is thrown, every time it is thrown, not at the point where it is created. The “throw;” does not reset the stack trace, “throw ex;” does. 
&lt;P&gt;Don’t reuse a single exception object. Every time gets thrown the stack trace will be reset, which means that any code up the stack which catches the exception and logs the trace for later analysis will almost certainly be logging someone else’s trace. Making exceptions is cheap, and you’re already in a fatal error situation; it doesn’t matter if the app crashes a few microseconds slower. Take the time to allocate as many exceptions as you plan on throwing.&lt;/P&gt;&lt;/DIV&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9965434" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/C_2300_/default.aspx">C#</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/Immutability/default.aspx">Immutability</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/exception+handling/default.aspx">exception handling</category></item><item><title>Attracting Talent</title><link>http://blogs.msdn.com/ericlippert/archive/2010/03/01/attracting-talent.aspx</link><pubDate>Mon, 01 Mar 2010 14:48:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9970112</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>95</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9970112.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9970112</wfw:commentRss><description>&lt;DIV class=mine&gt;
&lt;P&gt;Today I want your insights, opinions and advice.&lt;/P&gt;
&lt;P&gt;In any large organization over time people are going to move around within that organization, or leave it for various reasons, and therefore sometimes you need to bring in fresh new people to fill the gaps left by the attrition. Over my sixteen years in the Developer Division at Microsoft I’ve seen numerous understaffed teams working on great technology; it is almost always a struggle for them to find, attract and hire talented developers.&lt;/P&gt;
&lt;P&gt;My two questions for all you professional developers reading this are:&lt;/P&gt;
&lt;P&gt;(1) When you read a job posting on a career site, &lt;STRONG&gt;what are the things you look for when deciding whether you’re interested or not&lt;/STRONG&gt;? Are there “red flags” that immediately make you unlikely to follow up? Are there more subtle indicators that discourage you? What encourages you?&lt;/P&gt;
&lt;P&gt;(2) What would you find particularly attractive or unattractive about &lt;STRONG&gt;an opportunity to work on a developer tools team&lt;/STRONG&gt;? (at Microsoft or elsewhere, though I am particularly interested in “at Microsoft”.)&lt;/P&gt;
&lt;P&gt;Note that I am particularly interested in your opinions on &lt;STRONG&gt;software developer&lt;/STRONG&gt; positions; if you have insights on attracting people to program management, quality assurance or user education positions I’m happy to hear them but I’m more interested in developer position factors today.&lt;/P&gt;
&lt;P&gt;I certainly know what &lt;EM&gt;my&lt;/EM&gt; answers are to those two questions, but I already work here and I might be atypical. I’m interested in what &lt;EM&gt;your&lt;/EM&gt; answers are. Please leave comments!&lt;/P&gt;&lt;/DIV&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9970112" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/Interviewing/default.aspx">Interviewing</category></item><item><title>Careful with that axe, part two: What about exceptions?</title><link>http://blogs.msdn.com/ericlippert/archive/2010/02/25/careful-with-that-axe-part-two-what-about-exceptions.aspx</link><pubDate>Thu, 25 Feb 2010 14:59:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9956648</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>10</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9956648.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9956648</wfw:commentRss><description>&lt;div class="mine"&gt; &lt;p&gt;Suppose you’re shutting down the worker thread we were talking about last time, and it throws an exception? What happens? &lt;p&gt;Badness, that’s what. What to do about it? &lt;p&gt;As in our previous discussion, it is better to not be in this situation in the first place: write the worker code so that it does not throw. If you cannot do that, then you have two choices: handle the exception, or don't handle the exception.  &lt;p&gt;Suppose you don't handle the exception. As of I think CLR v2, an unhandled exception in a worker thread shuts down the whole application. The reason being, in the past what would happen is you'd start up a bunch of worker threads, they'd all throw exceptions, and you'd end up with a running application with no worker threads left, doing no work, and not telling the user about it. It is better to force the author of the code to handle the situation where a worker thread goes down due to an exception; doing it the old way effectively hides bugs and makes it easy to write fragile applications.  &lt;p&gt;Suppose you do handle the exception. Now what? Something on another thread threw an exception, which is by definition an unexpected, exceptionally bad error condition. You now have no clue whatsoever that any of your data is consistent or any of your program invariants are maintained in any of your subsystems. So what are you going to do? There's hardly anything safe you can do at this point.  &lt;p&gt;The question is "what is best for the user in this unfortunate situation?" It depends on what the application is doing. It is entirely possible that the best thing to do at this point is to simply aggressively shut down and tell the user that something unexpected failed. That might be better than trying to muddle on and possibly making the situation worse, by, say, accidentally destroying user data while trying to clean up.  &lt;p&gt;Or, it is entirely possible that the best thing to do is to make a good faith effort to preserve the user's data, tidy up as much state as possible, and terminate as normally as possible.  &lt;p&gt;Both today’s question and the one from last time are specific versions of the more general question "what do I do when my subsystems running on worker threads do not behave themselves?" If your subsystems are unreliable, either &lt;em&gt;make them reliable&lt;/em&gt;, or &lt;em&gt;have a policy for how you deal with an unreliable subsystem, and implement that policy&lt;/em&gt;. That's a vague answer I know, but that's because dealing with an unreliable subsystem is an inherently awful situation to be in. How you deal with it depends on the nature of its unreliability, and the consequences of that unreliability to the user's valuable data. There are no easy one-size-fits-all answers here, unfortunately.&lt;/p&gt;&lt;/div&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9956648" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/Threading/default.aspx">Threading</category></item><item><title>Careful with that axe, part one: Should I specify a timeout?</title><link>http://blogs.msdn.com/ericlippert/archive/2010/02/22/should-i-specify-a-timeout.aspx</link><pubDate>Mon, 22 Feb 2010 14:41:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9956636</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>19</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9956636.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9956636</wfw:commentRss><description>&lt;div class="mine"&gt; &lt;p&gt;&lt;a href="http://indieexpress.com/AFIDigitalInterviewCAREFULWITHTHATAXE.htm"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; margin: 0px 15px 0px 0px; display: inline; border-top: 0px; border-right: 0px" title="Careful" border="0" alt="Careful" align="left" src="http://blogs.msdn.com/blogfiles/ericlippert/WindowsLiveWriter/ShouldIspecifyatimeout_CF1B/Careful_3.jpg" width="180" height="149"&gt;&lt;/a&gt; The other day, six years ago, I was was talking a bit about &lt;a href="http://blogs.msdn.com/ericlippert/archive/2003/09/24/i-m-a-traveling-man-don-t-tie-me-down.aspx" mce_href="http://blogs.msdn.com/ericlippert/archive/2003/09/24/i-m-a-traveling-man-don-t-tie-me-down.aspx"&gt;how to decide whether to keep waiting for a bus&lt;/a&gt;, or to give up and walk. It led to a quite interesting discussion on &lt;a href="http://discuss.fogcreek.com/techInterview/default.asp?cmd=show&amp;amp;ixPost=1547&amp;amp;ixReplies=9" mce_href="http://discuss.fogcreek.com/techInterview/default.asp?cmd=show&amp;amp;ixPost=1547&amp;amp;ixReplies=9"&gt;the old JoS forum&lt;/a&gt;. But what if the choice isn’t “wait for a bit then give up”, instead it is “wait for a bit, and then take an axe to the thread”? A pattern I occasionally see is something like I’ve got a worker thread that I started up, I ask it to shut down, and then I wait for it to do so. If it doesn’t shut down soon, take an axe to it:&lt;span class="code"&gt;  &lt;p&gt;this.running = false; &lt;br&gt;if (!workerThread.Join(timeout))&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; workerThread.Abort();&lt;/p&gt;&lt;/span&gt; &lt;p&gt;Is this a good idea? &lt;/p&gt; &lt;p&gt;It depends on just how badly the worker thread behaves and what it is doing when it is misbehaving.  &lt;p&gt;If you can guarantee that the work is short in duration, for whatever 'short' means to you, then you don't need a timeout. If you cannot guarantee that, then I would suggest first rewriting the code so that you &lt;em&gt;can&lt;/em&gt; guarantee that; life becomes much easier if you know that the code will terminate quickly when you ask it to.  &lt;p&gt;If you cannot, then what's the right thing to do? The assumption of this scenario is that &lt;strong&gt;the worker is ill-behaved and does not terminate in a timely manner when asked to&lt;/strong&gt;. So now we've got to ask ourselves "is the scenario that the worker is &lt;em&gt;slow by design&lt;/em&gt;, &lt;em&gt;buggy&lt;/em&gt;, or &lt;em&gt;hostile&lt;/em&gt;?"  &lt;p&gt;In the first option, the worker is simply doing something that takes a long time and for whatever reason, cannot be interrupted. What's the right thing to do here? I have no idea. This is a terrible situation to be in. Presumably the worker is not shutting down quickly because doing so is dangerous or impossible. In that case, what are you going to do when the timeout times out? You've got something that is dangerous or impossible to shut down, and its not shutting down in a timely manner. Your choices seem to be  &lt;p&gt;(1) do nothing &lt;br&gt;(2) wait longer&lt;br&gt;(3) do something impossible. Preferably before breakfast.&lt;br&gt;(4) do something dangerous &lt;br&gt;&lt;br&gt;Choice one is identical to not waiting at all; if that’s what you’re going to do then why wait in the first place? Choice two just changes the timeout to a different value; this is question begging. By assumption we're not waiting forever. Choice three is impossible. That leaves “do something dangerous”. Which seems… dangerous.&lt;/p&gt; &lt;p&gt;Knowing what the right thing to do in order to minimize harm to user data depends upon the exact circumstances that are causing the danger; analyze it carefully, understand all the scenarios, and figure out the right thing to do. There’s no slam-dunk easy solution here; it will depend entirely on the real code running. &lt;/p&gt; &lt;p&gt;Now suppose the worker is supposed to be able to shut down quickly, but does not because it has a bug. Obviously, if you can, fix the bug. If you cannot fix the bug -- perhaps it is in code you do not own -- then again, you are in a terrible fix. You have to understand what the consequences are of not waiting for already-buggy-and-therefore-unpredictable code to finish before disposing of the resources that you know it is using right now on another thread. And you have to know what the consequences are of terminating a thread while a buggy worker thread is still busy doing heaven only knows what to operating system state.  &lt;p&gt;If the code is &lt;em&gt;hostile&lt;/em&gt; and is &lt;em&gt;actively resisting being shut down&lt;/em&gt; then you have already lost. You cannot halt the thread by normal means, and you cannot even reliably thread abort it. There is no guarantee whatsoever that aborting a hostile thread actually terminates it; the owner of the hostile code that you have foolishly started running in your process could be doing all of its work in a finally block or other constrained region which prevents thread abort exceptions.  &lt;p&gt;The best thing to do is to never get into this situation in the first place; if you have code that you think is hostile, either do not run it at all, or run it in its own process, and terminate &lt;em&gt;the process&lt;/em&gt;, not &lt;em&gt;the thread&lt;/em&gt; when things go badly.  &lt;p&gt;In short, there's no good answer to the question "what do I do if it takes too long?" You are in a &lt;em&gt;terrible&lt;/em&gt; situation if that happens and there is no easy answer. Best to work hard to ensure you don't get into it in the first place; only run &lt;strong&gt;cooperative, benign, safe code&lt;/strong&gt; that always shuts itself down cleanly and rapidly when asked. &lt;strong&gt;&lt;a href="http://www.youtube.com/watch?v=tMpGdG27K9o" mce_href="http://www.youtube.com/watch?v=tMpGdG27K9o"&gt;Careful with that axe, Eugene&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Next time, what about exceptions?&lt;/p&gt;&lt;/div&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9956636" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/Security/default.aspx">Security</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/Threading/default.aspx">Threading</category></item><item><title>What’s the difference between ternary and tertiary?</title><link>http://blogs.msdn.com/ericlippert/archive/2010/02/18/whats-the-difference-between-ternary-and-tertiary.aspx</link><pubDate>Thu, 18 Feb 2010 14:22:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9956607</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>25</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9956607.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9956607</wfw:commentRss><description>&lt;DIV class=mine&gt;
&lt;P&gt;&lt;A href="http://swazzle.com/blogs/2006/02/color-theory-3.html" mce_href="http://swazzle.com/blogs/2006/02/color-theory-3.html"&gt;&lt;IMG style="BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; MARGIN: 0px 15px 0px 0px; DISPLAY: inline; BORDER-TOP: 0px; BORDER-RIGHT: 0px" title=Tertiary border=0 alt=Tertiary align=left src="http://blogs.msdn.com/blogfiles/ericlippert/WindowsLiveWriter/Whatsthedifferencebetweenternaryandteria_C6C2/Tertiary_3.jpg" width=132 height=126 mce_src="http://blogs.msdn.com/blogfiles/ericlippert/WindowsLiveWriter/Whatsthedifferencebetweenternaryandteria_C6C2/Tertiary_3.jpg"&gt;&lt;/A&gt; The conditional operator ( &lt;SPAN class=code&gt;condition ? consequence : alternative &lt;/SPAN&gt;) is often referred to as both the “ternary operator” and the “tertiary operator”. What’s the difference?&lt;/P&gt;
&lt;P&gt;“&lt;EM&gt;Ternary&lt;/EM&gt;” means “&lt;EM&gt;having three parts&lt;/EM&gt;”. Operators in C# can be unary, binary or ternary – they take one, two or three operands. &lt;/P&gt;
&lt;P&gt;&amp;nbsp;“&lt;EM&gt;Tertiary&lt;/EM&gt;” means “&lt;EM&gt;third in order&lt;/EM&gt;”. Compiler flaws noted in bug reports can be of primary, secondary or tertiary importance. Colours can be primary (yellow), secondary (orange) or &lt;A href="http://swazzle.com/blogs/2006/02/color-theory-3.html" mce_href="http://swazzle.com/blogs/2006/02/color-theory-3.html"&gt;tertiary&lt;/A&gt; (yellowish-orange), like our muppet friend to the left there. And so on.&lt;/P&gt;
&lt;P&gt;“Tertiary operator” is therefore an English usage error, unless what you’re trying to say is that the conditional operator is third most important to you, or that it is a lovely greenish-blue colour.&lt;/P&gt;
&lt;P&gt;I say avoid the problem altogether; it is simply more clear to call the conditional operator “the conditional operator”.&lt;/P&gt;&lt;/DIV&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9956607" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/C_2300_/default.aspx">C#</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/English+Usage/default.aspx">English Usage</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/conditional+compilation/default.aspx">conditional compilation</category></item><item><title>A twist of lemon</title><link>http://blogs.msdn.com/ericlippert/archive/2010/02/15/double-half-caf-with-a-twist-of-lemon.aspx</link><pubDate>Mon, 15 Feb 2010 14:48:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9944878</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>25</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9944878.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9944878</wfw:commentRss><description>&lt;DIV class=mine&gt;
&lt;P&gt;I was browsing the archive of design notes from the early days of the C# language the other day. Apparently whoever was editing the notes back then had a sense of humour. (UPDATE: &lt;A href="http://blogs.msdn.com/ericgu/archive/2004/08/12/213778.aspx" mce_href="http://blogs.msdn.com/ericgu/archive/2004/08/12/213778.aspx"&gt;It was Scott, just as I suspected&lt;/A&gt;.) I stumbled across this note from May 1999:&lt;/P&gt;
&lt;HR&gt;
&lt;SPAN class=spec&gt;
&lt;P&gt;We considered a proposal to rename &lt;STRONG&gt;short&lt;/STRONG&gt;, &lt;STRONG&gt;int&lt;/STRONG&gt;, and &lt;STRONG&gt;long&lt;/STRONG&gt; to &lt;STRONG&gt;short&lt;/STRONG&gt;, &lt;STRONG&gt;tall&lt;/STRONG&gt;, and &lt;STRONG&gt;grande&lt;/STRONG&gt;. More thought on this issue is required; we will revisit this issue on Friday. &lt;/SPAN&gt;
&lt;HR&gt;

&lt;P&gt;And yet the notes for the following Friday say nothing of it. Someone dropped the ball. 
&lt;P&gt;It’s not too late. I propose in the same vein that we rename &lt;STRONG&gt;float&lt;/STRONG&gt;, &lt;STRONG&gt;double&lt;/STRONG&gt; and &lt;STRONG&gt;decimal&lt;/STRONG&gt; to &lt;STRONG&gt;singleshot&lt;/STRONG&gt;, &lt;STRONG&gt;doubleshot&lt;/STRONG&gt; and &lt;STRONG&gt;quadrupleshot&lt;/STRONG&gt;. &lt;STRONG&gt;byte&lt;/STRONG&gt; can be &lt;STRONG&gt;cappuccino&lt;/STRONG&gt;. And of course the &lt;A href="http://msdn.microsoft.com/en-us/library/system.numerics.biginteger(VS.100).aspx" mce_href="http://msdn.microsoft.com/en-us/library/system.numerics.biginteger(VS.100).aspx"&gt;BigInteger&lt;/A&gt; in the new math library can be &lt;A href="http://www.youtube.com/watch?v=z-CrML0BzOA" mce_href="http://www.youtube.com/watch?v=z-CrML0BzOA"&gt;half double decaffeinated half-caf with a twist of lemon&lt;/A&gt;.&lt;/P&gt;&lt;/DIV&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9944878" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/C_2300_/default.aspx">C#</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/bad+jokes/default.aspx">bad jokes</category></item><item><title>Chaining simple assignments is not so simple</title><link>http://blogs.msdn.com/ericlippert/archive/2010/02/11/chaining-simple-assignments-is-not-so-simple.aspx</link><pubDate>Thu, 11 Feb 2010 14:59:00 GMT</pubDate><guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:9945336</guid><dc:creator>Eric Lippert</dc:creator><slash:comments>43</slash:comments><comments>http://blogs.msdn.com/ericlippert/comments/9945336.aspx</comments><wfw:commentRss>http://blogs.msdn.com/ericlippert/commentrss.aspx?PostID=9945336</wfw:commentRss><description>&lt;DIV class=mine&gt;
&lt;P&gt;UPDATE:&amp;nbsp;I interrupt this episode of FAIC with a request from my friend and&amp;nbsp;colleague Lucian,&amp;nbsp;from the VB team, who wonders whether&amp;nbsp;it is common in C# to take advantage of the fact that assignment expressions are expressions. The most&amp;nbsp;common usage of this pattern is the subject of&amp;nbsp;this blog entry: the fact that "chained" assignment works at all is a consequence of the fact that assignments are expressions, not&amp;nbsp;statements. There are other uses too; one&amp;nbsp;could imagine something like "return this.myField = x;" as a short cut for "this.myField = x; return this.myField;" -- perhaps we are performing some computation and then recording the results for&amp;nbsp;use later.&amp;nbsp;Or perhaps we've got something like myNonNullableString = (myNullableString = Foo()) ?? "&amp;lt;null&amp;gt;"; -- there are any number of ways this idiom &lt;EM&gt;could&lt;/EM&gt; be used.&lt;/P&gt;
&lt;P&gt;I do not use this idiom myself; I'm of the opinion that side effects such as assignments are best represented&amp;nbsp;by putting&amp;nbsp;each in&amp;nbsp;a statement of&amp;nbsp;its own, rather than as something embedded in a larger expression. My question for you is: &lt;STRONG&gt;do you use assignments as expressions?&lt;/STRONG&gt; If so, how and why?&amp;nbsp;Note that I am looking for mundane,&amp;nbsp;"real world" examples of this pattern, not clever ideas about how this could in theory be used. If you've got one, please leave it in the comments and I'll pass it along to Lucian. Thanks!&lt;/P&gt;
&lt;P&gt;*********************&lt;/P&gt;
&lt;P&gt;Today I examine another myth about C#. Consider the following code:&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P&gt;a = b = c;&lt;/P&gt;&lt;/SPAN&gt;
&lt;P&gt;This is legal; you can make arbitrarily long chains of&amp;nbsp;simple assignments. This pattern is most often seen in something like&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P&gt;int i, j, k;&lt;BR&gt;i = j = k = 123;&lt;/P&gt;&lt;/SPAN&gt;
&lt;P&gt;I often hear that this works “&lt;EM&gt;because assignment is right-associative and results in the value of the right-hand side&lt;/EM&gt;”. &lt;/P&gt;
&lt;P&gt;Well, that’s half true. It is right-associative; obviously this has to be equivalent to&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P&gt;i = (j = (k = 123)));&lt;/P&gt;&lt;/SPAN&gt;
&lt;P&gt;It doesn’t make any sense to parenthesize it from the left. Now, in this particular example, the statement is true, but in general it is not. The result of the simple assignment operator is &lt;STRONG&gt;not&lt;/STRONG&gt; the value of the right hand side:&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P&gt;const int x = 10;&lt;BR&gt;short y;&lt;BR&gt;object z;&lt;BR&gt;z = y = x;&lt;BR&gt;System.Console.WriteLine(z.GetType().ToString());&lt;/P&gt;&lt;/SPAN&gt;
&lt;P&gt;This prints “System.Int16”, not “System.Int32”. The value of the right-hand side of “y = x” is clearly an int, but we do not assign a reference to a boxed int to z, we assign a reference to a boxed short!&lt;/P&gt;
&lt;P&gt;So then is the correct statement “&lt;EM&gt;… results in the value of the left-hand side&lt;/EM&gt;”?&lt;/P&gt;
&lt;P&gt;Nope, that’s not right either, and we can prove it.&lt;/P&gt;&lt;SPAN class=code&gt;
&lt;P&gt;class C&lt;BR&gt;{&lt;BR&gt;&amp;nbsp; private string x;&lt;BR&gt;&amp;nbsp; public string X { &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; get { return x ?? ""; } &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; set { x = value; } }&lt;BR&gt;&amp;nbsp; static void Main()&lt;BR&gt;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; C c = new C();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; object z;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; z = c.X = null;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.Console.WriteLine(z == null);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.Console.WriteLine(c.X == null); &lt;BR&gt;&amp;nbsp; }&lt;BR&gt;} &lt;/SPAN&gt;
&lt;P&gt;This prints “True / False” – the result of the assignment operator is not the value of the left-hand-side. The value of the left hand side is the empty string but the value of the operator is null.&lt;/P&gt;
&lt;P&gt;Heck, the left hand side need not even &lt;EM&gt;have&lt;/EM&gt; a value. Write-only properties are weird and rare, but legal; if there were no getter then the left hand side c.X would not &lt;EM&gt;have&lt;/EM&gt; a value!&lt;/P&gt;
&lt;P&gt;The correct statement should now be pretty easy to deduce: &lt;EM&gt;the result of the simple assignment operator is the value that was assigned to the left-hand side&lt;/EM&gt;.&lt;/P&gt;
&lt;P mce_keep="true"&gt;&amp;nbsp;&lt;/P&gt;&lt;/DIV&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=9945336" width="1" height="1"&gt;</description><category domain="http://blogs.msdn.com/ericlippert/archive/tags/C_2300_/default.aspx">C#</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/myths/default.aspx">myths</category><category domain="http://blogs.msdn.com/ericlippert/archive/tags/simple+assignment/default.aspx">simple assignment</category></item></channel></rss>